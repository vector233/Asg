name: Build and Release

on:
  push:
    tags:
      - 'v*' # Triggered when pushing a tag with v prefix, e.g. v1.0.0

# Add permissions
permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            output_name: Asg-macos
            asset_name: Asg-macos
          - os: windows-latest
            output_name: Asg-windows.exe
            asset_name: Asg-windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Install macOS dependencies
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install glfw xquartz
          echo "CGO_ENABLED=1" >> $GITHUB_ENV

      # Install Windows dependencies
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw
          echo "CGO_ENABLED=1" >> $env:GITHUB_ENV

      - name: Install dependencies
        run: go mod download

      # Add tag info to build
      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        shell: bash

      - name: Build for Chinese (macOS/Windows)
        run: |
          go build -tags ci -ldflags="-X 'github.com/vector233/Asg/internal/i18n.DefaultLang=zh' -X 'github.com/vector233/Asg/internal/version.Version=${{ env.TAG_NAME }}'" -o ${{ matrix.output_name }}-zh
        env:
          GOOS: ${{ matrix.os == 'macos-latest' && 'darwin' || 'windows' }}
          GOARCH: amd64
          CGO_ENABLED: 1

      - name: Build for English (macOS/Windows)
        run: |
          go build -tags ci -ldflags="-X 'github.com/vector233/Asg/internal/i18n.DefaultLang=en' -X 'github.com/vector233/Asg/internal/version.Version=${{ env.TAG_NAME }}'" -o ${{ matrix.output_name }}-en
        env:
          GOOS: ${{ matrix.os == 'macos-latest' && 'darwin' || 'windows' }}
          GOARCH: amd64
          CGO_ENABLED: 1
          
      # Package macOS builds
      - name: Package macOS builds
        if: matrix.os == 'macos-latest'
        run: |
          # Create app bundles
          mkdir -p Asg-zh.app/Contents/MacOS
          mkdir -p Asg-en.app/Contents/MacOS
          cp ${{ matrix.output_name }}-zh Asg-zh.app/Contents/MacOS/Asg
          cp ${{ matrix.output_name }}-en Asg-en.app/Contents/MacOS/Asg
          
          # Create Info.plist
          cat > Asg-zh.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>Asg</string>
              <key>CFBundleIdentifier</key>
              <string>com.vector233.asg</string>
              <key>CFBundleName</key>
              <string>Asg</string>
              <key>CFBundleVersion</key>
              <string>${{ env.TAG_NAME }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ env.TAG_NAME }}</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.13</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          cp Asg-zh.app/Contents/Info.plist Asg-en.app/Contents/Info.plist
          
          # Create zip files
          ditto -c -k --keepParent Asg-zh.app Asg-zh.zip
          ditto -c -k --keepParent Asg-en.app Asg-en.zip

      # Upload artifacts for macOS (Chinese)
      - name: Upload Chinese build for macOS
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-zh
          path: Asg-zh.zip

      # Upload artifacts for macOS (English)
      - name: Upload English build for macOS
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-en
          path: Asg-en.zip
          
      # Upload artifacts for Windows (Chinese)
      - name: Upload Chinese build for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-zh
          path: ${{ matrix.output_name }}-zh

      # Upload artifacts for Windows (English)
      - name: Upload English build for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-en
          path: ${{ matrix.output_name }}-en

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Asg-macos-zh/Asg-zh.zip
            Asg-macos-en/Asg-en.zip
            Asg-windows-zh/Asg-windows.exe-zh
            Asg-windows-en/Asg-windows.exe-en
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}